{"version":3,"file":"static/js/451.cffc7034.chunk.js","mappings":"gRAMe,SAASA,IACtB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACRE,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,GAAKhB,EAAL,CAEA,IAAMiB,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEC,OAFDF,EAAAC,KAAA,EAElBf,GAAa,GAAMc,EAAAE,KAAA,GACQC,EAAAA,EAAAA,IAAqB5B,GAAQ,KAAD,EAAjDuB,EAAYE,EAAAI,KAElBtB,EAAYgB,GAAcE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAE1BV,EAASU,EAAAK,GAAMC,SAAS,QAEJ,OAFIN,EAAAC,KAAA,GAExBf,GAAa,GAAOc,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAX,EAAA,wBAEvB,kBAXkB,OAAAJ,EAAAgB,MAAA,KAAAC,UAAA,KAanBlB,GAfmB,CAgBrB,GAAG,CAACjB,KAGFoC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG3B,IAAa4B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBzB,IAASwB,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CAACT,QAASjB,IACnB,OAAbR,IACCgC,EAAAA,EAAAA,KAAA,MAAAD,SACG/B,EAASmC,KAAI,SAAAC,GACZ,OACEN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,SAAOK,EAAQC,SACnBP,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAI,UAAQK,EAAQE,UACpBR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,SAAOK,EAAQG,UAHXH,EAAQI,GAMrB,QAKV,C","sources":["pages/CommentPage.jsx"],"sourcesContent":["import ErrorMessage from 'components/Error';\nimport Loader from 'components/Loader';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { findPostCommentsById } from 'servise/api';\n\nexport default function CommentPage() {\n  const { postId } = useParams();\n  const [comments, setComments] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!postId) return;\n\n    const fetchAllPosts = async () => {\n      try {\n        setIsLoading(true);\n        const commentsData = await findPostCommentsById(postId);\n\n        setComments(commentsData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAllPosts();\n  }, [postId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {comments !== null && (\n        <ul>\n          {comments.map(comment => {\n            return (\n              <li key={comment.id}>\n                <h3>Name: {comment.name}</h3>\n                <h4>Email: {comment.email}</h4>\n                <p>Body: {comment.body}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n}\n"],"names":["CommentPage","postId","useParams","_useState","useState","_useState2","_slicedToArray","comments","setComments","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchAllPosts","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commentsData","wrap","_context","prev","next","findPostCommentsById","sent","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","ErrorMessage","map","comment","name","email","body","id"],"sourceRoot":""}